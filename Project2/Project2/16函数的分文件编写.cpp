#include<iostream>
#include "swap.h"
using namespace std;
void swap(int a, int b);
//void swap(int a, int b)
//{
//	int temp = a;
//	a = b;
//	b = temp;
//
//	cout << "a = " << a << endl;
//	cout << "b = " << b << endl;
//}

int main16()
{
	/*函数的分文件编写
 *1创建.h后缀名的头文件
 *2创建.cpp后缀名的源文件
 * 3在头文件中写函数的声明
 * 4在源文件中写函数的定义
 */
	int a = 10;
	int b = 20;

	swap(a, b);//打印的是swap的形参，cout在swap定义上。a，b的实际值没有改变。
	//指针
	/*指针的作用：可以通过指针间接访问内存
	* 内存编号是从0开始记录的，一般用十六进制数字表示
	* 可以利用指针变量保存地址
	* 指针定义语法：数据类型 * 变量;
	*/
	//1定义指针
	//int a = 10;
	int * p;
	//让指针记录变量a的地址
	p = &a;
	cout << "a的地址：" << (int)&a << endl;
	cout << "指针p为：" << p << endl;
	cout << "a = " << a << endl;
	//2使用指针
	//可以通过解引用的方式来找到指针指向的内存
	//指针前加 * 代表解引用，找到指针指向的内存中的数据
	*p = 1000;//改变了a的数值
	cout << "a = " << a << endl;
	cout << "*p = " << *p << endl;
	//int *指针类型，在32位操作系统下：占用4个字节空间，64位操作下占8个字节。x86 32位
	//浮点型 整型 双精度浮点型 常量 的指针在32位都是4个字节

	//空指针和野指针
	/*空指针：指针变量指向内存中编号为0的空间
	* 用途：初始化指针变量
	* 注意：空指针指向的内存是不可以访问的
	*/
	int * v = NULL;//空指针
	//0~255之间的内存编号是系统占用的，因此不可以访问
	//野指针：指针变量指向非法的内存空间
	//在程序中，尽量避免出现野指针
	/*int* s = (int*)0x1100;//未定义指针即为野指针
	cout << *s << endl;*///出错

	//总结：空指针和野指针都不是我们申请的空间，因此不要访问。

/*const修饰指针
* 1const修饰指针--常量指针
* 2const修饰常量--指针常量
* 3const即修饰指针，又修饰常量
* 
* 常量指针
* int a =10
* int b =10 
* int * p = &a;
* const int * p = &a;可改成指向b，而且值没改
* 特点：指针的指向可以修改，但是指针指向的值不可以改。
* 
* int * const p = &a;
* 指针常量
* 特点：指针的指向不可以改，指针指向的值可以改。
* *p = 20 right
* p = &b; wrong
* 
* const即修饰指针，又修饰常量
* const int * const p = &a;
* 特点：指针的指向和指针指向的值都不可以改。
* 
* 技巧：看const右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量
*/


	system("pause");

	return 0;
}
